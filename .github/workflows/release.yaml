name: Release
on:
  push:
    branches:
      - main
    tags:
      - "v*"
jobs:
  build:
    name: build release assets
    runs-on: ${{ matrix.config.os }}
    env: ${{ matrix.config.env }}
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              arch: "amd64",
              extension: "",
              args: "--all-features --release",
              targetDir: "target/release",
              env: {},
            }
          - {
              os: "ubuntu-latest",
              arch: "aarch64",
              extension: "",
              args: "--all-features --release --target aarch64-unknown-linux-gnu",
              targetDir: "target/aarch64-unknown-linux-gnu/release",
              env: { OPENSSL_DIR: "/usr/local/openssl-aarch64" },
            }
          - {
              os: "macos-latest",
              arch: "amd64",
              extension: "",
              args: "--all-features --release",
              targetDir: "target/release",
              env: {},
            }
          - {
              os: "windows-latest",
              arch: "amd64",
              extension: ".exe",
              args: "--all-features --release",
              targetDir: "target/release",
              env: {},
            }
    steps:
      - uses: actions/checkout@v2

      - name: set the release version (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: set the release version (master)
        if: github.ref == 'refs/heads/master'
        shell: bash
        run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV

      - name: lowercase the runner OS name
        shell: bash
        run: |
          OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          echo "RUNNER_OS=$OS" >> $GITHUB_ENV

      - name: setup for cross-compiled aarch64 build
        if: matrix.config.arch == 'aarch64'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          cd /tmp
          git clone https://github.com/openssl/openssl
          cd openssl
          git checkout OpenSSL_1_1_1l
          sudo mkdir -p $OPENSSL_DIR
          ./Configure linux-aarch64 --prefix=$OPENSSL_DIR --openssldir=$OPENSSL_DIR shared
          make CC=aarch64-linux-gnu-gcc
          sudo make install
          rustup target add aarch64-unknown-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml

      # hack: install rustfmt to work around darwin toolchain issues
      - name: "(macOS) install dev tools"
        if: runner.os == 'macOS'
        run: |
          rustup component add rustfmt --toolchain stable-x86_64-apple-darwin
          rustup component add clippy --toolchain stable-x86_64-apple-darwin
          rustup update stable

      - name: build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.config.args }}

      - name: package release assets
        shell: bash
        run: |
          mkdir _dist
          cp README.md LICENSE.txt ${{ matrix.config.targetDir }}/wagi${{ matrix.config.extension }} _dist/
          cd _dist
          tar czf wagi-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz README.md LICENSE.txt wagi${{ matrix.config.extension }}

      - uses: actions/upload-artifact@v1
        with:
          name: wagi
          path: _dist/wagi-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz
